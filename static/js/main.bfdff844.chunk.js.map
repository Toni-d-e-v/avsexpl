{"version":3,"sources":["components/AddressView/AddressView.tsx","components/AddressView/index.ts","helpers.tsx","hooks/useEthRPC.ts","stores/useEthRPCStore.ts","components/TxList/TxList.tsx","components/TxList/index.ts","components/AddressTransactions/index.ts","components/AddressTransactions/AddressTransactions.tsx","containers/Address.tsx","components/BlockView/BlockGasPrice.tsx","components/BlockView/BlockView.tsx","components/BlockView/index.ts","containers/Block.tsx","components/formatters.ts","components/HashRate/index.ts","components/HashRate/HashRate.tsx","themes/victoryTheme.ts","components/ChartCard.tsx","components/BlockList/BlockList.tsx","components/BlockList/index.ts","containers/BlockList.tsx","components/StatCharts/StatCharts.tsx","components/StatCharts/index.ts","containers/Dashboard.tsx","containers/NodeView.tsx","components/TxView/TxView.tsx","components/TxView/index.ts","containers/Transaction.tsx","themes/jadeTheme.ts","i18n.ts","translations/en.ts","translations/kr.ts","translations/cn.ts","containers/LanguageMenu/index.tsx","containers/LanguageMenu/LanguageMenu.tsx","components/ChainDropdown/ChainDropdown.tsx","helpers/createPreserveHistory.ts","components/BlockRaw/index.ts","components/BlockRaw/BlockRaw.tsx","containers/BlockRawContainer.tsx","components/TxRaw/TxRaw.tsx","containers/TransactionRawContainer.tsx","components/CustomPieChartLabel.tsx","components/MinerStats.tsx","components/MinerStatsTable.tsx","components/BlockPagination/index.ts","components/BlockPagination/BlockPagination.tsx","containers/MinerStatsPage.tsx","stores/useChainListStore.ts","hooks/useChainList.ts","components/AddChain/AddChain.tsx","App.tsx","index.tsx"],"names":["AddressView","props","address","balance","txCount","code","t","useTranslation","Card","CardContent","Typography","variant","useBlockNumber","erpc","React","NaN","blockNumber","setBlockNumber","useInterval","eth_blockNumber","then","bn","hexToNumber","getBlocks","from","to","promises","i","push","eth_getBlockByNumber","toString","Promise","all","useEthRPC","queryUrlOverride","useState","setErpc","selectedChain","setSelectedChain","process","REACT_APP_ETH_RPC_URL","urlOverride","useEffect","undefined","rpcUrl","rpc","reduce","curr","toCheck","indexOf","a","newUrl","parsedUrl","URL","alert","protocol","split","fallbackPort","port","parseInt","ERPC","transport","host","hostname","type","path","pathname","runAsync","requestManager","close","createStore","useQueryParam","StringParam","rpcUrlQuery","TxListItem","tx","showblockNumber","TableRow","TableCell","Link","component","className","children","hash","transactionIndex","TxList","Table","TableHead","showBlockNumber","TableBody","transactions","map","key","AddressTransactions","style","Grid","container","justify","IconButton","onClick","onPrev","disabled","disablePrev","ArrowBackIos","onNext","disableNext","ArrowForwardIos","length","padding","unit","require","Address","match","history","params","block","useEthRPCStore","transactionCount","setTransactionCount","setBalance","setCode","blockNum","setTransactions","Math","max","isNaN","hexBlockNumber","eth_getTransactionCount","txCountRes","eth_getBalance","b","eth_getCode","c","blcks","txes","_","flatMap","filteredTxes","filter","sortedTxes","sortBy","reverse","CircularProgress","fromWei","newQuery","BlockGasPrice","list","func","min","item","BigIntMinBy","BigInt","gasPrice","BigIntMaxBy","BlockView","useHistory","timestamp","parentHash","miner","nonce","difficulty","extraData","stateRoot","transactionsRoot","receiptsRoot","gasUsed","gasLimit","size","filledPercent","Button","position","right","top","number","LinearProgress","width","value","date","hexToDate","hexToString","Block","setBlock","eth_getBlockByHash","hashesToGH","hashes","dividedBy","toNumber","toFixed","HashRate","blockTime","BigNumber","baseLabelStyles","fontFamily","fontSize","letterSpacing","fill","grey","stroke","strokeWidth","centeredLabelStyles","textAnchor","getTheme","theme","axis","axisLabel","grid","ticks","tickLabels","line","data","palette","primary","main","labels","bar","ChartCard","background","elevation","title","rightPaddingFix","paddingRight","BlockList","blocks","sortedBlocks","sort","overflowX","index","tdfp","blockHashShort","substring","authorHashShort","authorHashStyle","borderLeft","txTypes","create","transact","forEach","scope","Tooltip","count","placement","color","uncles","BlockListContainer","setBlocks","config","blockMapGasUsed","x","y","blockMapUncles","blockMapHashRate","blockMapTransactionCount","StatCharts","victoryTheme","xs","md","lg","height","wei","useTheme","chainId","setChainId","setGasPrice","syncing","setSyncing","peerCount","setPeerCount","ecoFund","setEcoFund","eth_chainId","cid","bl","eth_syncing","net_peerCount","eth_gasPrice","spacing","direction","href","currentBlock","highestBlock","hashRate","endIcon","marginTop","NodeView","urlParams","useParams","e","console","error","TxView","receipt","blockHash","gas","input","v","r","s","transactionHash","cumulativeGasUsed","contractAddress","status","logs","TransactionContainer","transaction","setTransaction","setReceipt","eth_getTransactionByHash","eth_getTransactionReceipt","lightTheme","responsiveFontSizes","createMuiTheme","MuiAppBar","MuiCard","overrides","root","default","darkTheme","paper","MuiTable","MuiTypography","momentMap","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translation","kr","cn","interpolation","escapeValue","format","lng","ln","moment","locale","reverseSupportedLanguages","supportedLanguages","LanguageMenu","anchorEl","setAnchorEl","event","currentTarget","language","Menu","id","keepMounted","open","Boolean","onClose","Object","values","lang","MenuItem","changeLanguage","handleMenuItemClick","ChainDropdown","selected","onChange","chains","name","PaperProps","maxHeight","ITEM_HEIGHT","chain","network","preserveQueryParameters","preserve","location","currentQuery","queryString","parse","window","search","preservedQuery","p","assign","stringify","createLocationDescriptorObject","state","BlockRaw","darkMode","useDarkMode","margin","zIndex","options","minimap","enabled","wordWrap","lineNumbers","wrappingIndent","readOnly","showFoldingControls","JSON","BlockRawContainer","TxRaw","gutterBottom","marginLeft","TransactionRawContainer","CustomPieChartLabel","this","defaultActive","active","datum","text","cornerRadius","flyoutStyle","Component","defaultEvents","VictoryTooltip","createHistory","queryParameters","blockTopMinerCount","countBy","val","label","blockTopMinerCountByAddress","MinerStats","showDefaultPieHover","setShowDefaultPieHover","colorScale","events","target","eventHandlers","onMouseOver","mutation","labelComponent","MinerStatsTable","topMiners","blocksMined","blockTopMiners","groupedMiners","groupBy","groupByMiner","aria-label","minerData","colSpan","bs","percentFull","greenColor","BlockPagination","blockHistoryLength","chartHeight","chartWidth","compact","useChainList","AddChain","setName","setNetwork","setRpc","Dialog","onCancel","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","defaultValue","DialogActions","onSubmit","createBrowserHistory","oldPush","oldReplace","replace","apply","App","setSearch","useChainListStore","setChains","ethRPC","setEthRPCChain","addChainDialogIsOpen","setAddChainDialogIsOpen","query","useQueryParams","setQuery","foundChain","find","startBatch","stopBatch","addNetwork","ethereum","request","method","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","symbol","decimals","reload","isAddress","q","RegExp","ETHJSONSpec","components","schemas","pattern","test","isKeccakHash","Keccak","isBlockNumber","handleSearch","qry","trim","ThemeProvider","AppBar","Toolbar","alignItems","alignContent","alt","marginRight","src","backgroundColor","border","textDecoration","cursor","InputBase","placeholder","onKeyDown","keyCode","borderRadius","NetworkWifi","toggle","concat","ReactRouterRoute","Route","CssBaseline","Dashboard","exact","MinerStatsPage","Transaction","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.bfdff844.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface IAddressViewProps {\n  address: string;\n  balance: string;\n  txCount: number;\n  code: string;\n}\n\nfunction AddressView(props: IAddressViewProps) {\n  const { address, balance, txCount, code } = props;\n  const { t } = useTranslation();\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\">{t(\"Address\")}: {address}</Typography>\n        <Typography variant=\"h6\">{t(\"Balance\")}: {balance}</Typography>\n        <Typography variant=\"h6\">{t(\"Transactions\")}: {txCount}</Typography>\n        <br />\n        <div>\n          <div>{t(\"Code\")}</div>\n          <pre>\n            <code>{code}</code>\n          </pre>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default AddressView;\n","import AddressView from \"./AddressView\";\nexport default AddressView;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n  const promises: any[] = [];\n\n  for (let i = from; i <= to; i++) {\n    promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n  }\n  return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC | undefined): [number] => {\n  const [blockNumber, setBlockNumber] = React.useState<number>(NaN);\n  useInterval(() => {\n    if (!erpc) {\n      return;\n    }\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(hexToNumber(bn));\n    });\n  }, 7000, true);\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.eth_blockNumber().then((bn: string) => {\n        setBlockNumber(hexToNumber(bn));\n      });\n    }\n  }, [erpc]);\n  return [blockNumber];\n};\n\nexport default getBlocks;\n","import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport React, { Dispatch, useState, useEffect } from \"react\";\nimport { IChain as Chain } from \"../models/chain\";\n\nfunction useEthRPC(queryUrlOverride?: string): [ERPC, Dispatch<Chain>] {\n  const [erpc, setErpc] = React.useState<ERPC>();\n  const [selectedChain, setSelectedChain] = React.useState<Chain>();\n  const [urlOverride] = useState(queryUrlOverride || process.env.REACT_APP_ETH_RPC_URL);\n\n  useEffect(() => {\n    if (selectedChain === undefined && !urlOverride) { return; }\n\n    const rpcUrl = selectedChain?.rpc.reduce((curr, toCheck) => {\n      if (curr !== selectedChain.rpc[0]) { return curr; }\n      if (toCheck.indexOf(\"${\") !== -1) { return curr; }\n      return toCheck;\n    }, selectedChain.rpc[0]);\n\n    const runAsync = async () => {\n      let parsedUrl;\n      const newUrl = urlOverride || rpcUrl;\n      if (!newUrl) { return; }\n      try {\n        parsedUrl = new URL(newUrl);\n      } catch (e) {\n        alert(\"invalid rpc url \" + newUrl);\n        return;\n      }\n      let rpc;\n      try {\n        const protocol = parsedUrl.protocol.split(\":\")[0] as any;\n        const fallbackPort = protocol === \"http\" ? 80 : 443;\n        const port = parseInt(parsedUrl.port, 10);\n        rpc = new ERPC({\n          transport: {\n            host: parsedUrl.hostname,\n            port: port ? port : fallbackPort,\n            type: protocol,\n            path: parsedUrl.pathname,\n          },\n        });\n      } catch (e) {\n        return;\n      }\n      if (rpc) {\n        setErpc(rpc);\n      }\n    };\n    runAsync();\n    return () => {\n      if (erpc) {\n        erpc.rpc.requestManager.close();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedChain]);\n\n  return [erpc as ERPC, setSelectedChain];\n}\n\nexport default useEthRPC;\n","import { createStore } from \"reusable\";\nimport useEthRPC from \"../hooks/useEthRPC\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\n\nexport default createStore(() => {\n  const [rpcUrlQuery] = useQueryParam(\"rpcUrl\", StringParam);\n\n  return useEthRPC(rpcUrlQuery);\n});\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\n\nimport { Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\nfunction TxListItem({ tx, showblockNumber }: { tx: any, showblockNumber?: boolean }) {\n  return (\n    <TableRow>\n      {showblockNumber && <TableCell>{hexToNumber(tx.blockNumber)}</TableCell>}\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/tx/${tx.hash}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.hash}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        <Link\n          component={({ className, children }: { children: any, className: string }) => (\n            <RouterLink className={className} to={`/address/${tx.from}`} >\n              {children}\n            </RouterLink>\n          )}>\n          {tx.from}\n        </Link>\n      </TableCell>\n\n      <TableCell>\n        {tx.to !== null ?\n          <Link\n            component={({ className, children }: { children: any, className: string }) => (\n              <RouterLink className={className} to={`/address/${tx.to}`} >\n                {children}\n              </RouterLink>\n            )}>\n            {tx.to}\n          </Link>\n          : null}\n      </TableCell>\n\n      <TableCell>{hexToNumber(tx.transactionIndex)}</TableCell>\n    </TableRow>\n  );\n}\n\nexport interface ITxListProps {\n  transactions: any[];\n  showBlockNumber?: boolean;\n}\n\nfunction TxList(props: ITxListProps) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          {props.showBlockNumber && <TableCell>Block Number</TableCell>}\n          <TableCell>Hash</TableCell>\n          <TableCell>From</TableCell>\n          <TableCell>To</TableCell>\n          <TableCell>Index</TableCell>\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {props.transactions.map(\n          (tx: any) =>\n            <TxListItem key={tx.hash} tx={tx} showblockNumber={props.showBlockNumber} />,\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default TxList;\n","import TxList from \"./TxList\";\nexport default TxList;\n","import AddressTransactions from \"./AddressTransactions\";\nexport default AddressTransactions;\n","import * as React from \"react\";\nimport { Typography, IconButton, Grid } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport TxList from \"../TxList\";\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\nimport { Transaction } from \"@etclabscore/ethereum-json-rpc\";\n\nexport interface IProps {\n  transactions: Transaction[];\n  from: number;\n  to: number;\n  disableNext?: boolean;\n  disablePrev?: boolean;\n  onNext?: () => void;\n  onPrev?: () => void;\n  style?: any;\n}\n\nconst AddressTransactions: React.FC<IProps> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <div style={props.style}>\n      <Grid container justify=\"flex-end\">\n        <IconButton onClick={props.onPrev} disabled={props.disablePrev}>\n          <ArrowBackIos />\n        </IconButton>\n        <IconButton onClick={props.onNext} disabled={props.disableNext}>\n          <ArrowForwardIos />\n        </IconButton>\n      </Grid>\n      <Grid container justify=\"flex-end\">\n        <Typography>Showing block range: {props.to} - {props.from}</Typography>\n      </Grid>\n      <TxList transactions={props.transactions || []} showBlockNumber={true}></TxList>\n      {(!props.transactions || props.transactions.length === 0) &&\n        <Grid container style={{ padding: \"15px\" }}>\n          <Typography>{t(\"No Transactions for this block range.\")}</Typography>\n        </Grid>\n      }\n    </div>\n  );\n};\n\nexport default AddressTransactions;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport AddressView from \"../components/AddressView\";\nimport _ from \"lodash\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport AddressTransactions from \"../components/AddressTransactions\";\nimport { History } from \"history\";\nimport { Transaction } from \"@etclabscore/ethereum-json-rpc\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\ninterface IProps {\n  match: {\n    params: {\n      address: string,\n      block: string,\n    };\n  };\n  history: History;\n}\n\nconst Address: React.FC<IProps> = ({ match, history }) => {\n  const { address, block } = match.params;\n  const [erpc] = useEthRPCStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const [transactionCount, setTransactionCount] = React.useState<string>();\n  const [balance, setBalance] = React.useState<string>();\n  const [code, setCode] = React.useState<string>();\n  const blockNum = block === undefined ? blockNumber : parseInt(block, 10);\n  const [transactions, setTransactions] = React.useState<Transaction[]>([]);\n\n  const from = Math.max(blockNum ? blockNum : 0 - 99, 0);\n  const to = blockNum;\n\n  React.useEffect(() => {\n    if (isNaN(blockNum) || isNaN(blockNumber)) {\n      return;\n    }\n    if (blockNum > blockNumber) {\n      history.push(`/address/${address}/${blockNumber}`);\n    }\n    if (blockNum < 0) {\n      history.push(`/address/${address}/0`);\n    }\n  }, [blockNumber, blockNum, history, address]);\n\n  React.useEffect(() => {\n    if (blockNumber === undefined || !erpc) {\n      return;\n    }\n    const hexBlockNumber = `0x${blockNumber.toString(16)}`;\n    erpc.eth_getTransactionCount(address, hexBlockNumber).then((txCount) => {\n      if (txCount === null) { return; }\n      setTransactionCount(txCount);\n      return txCount;\n    }).then((txCountRes: string | undefined) => {\n      if (txCountRes) {\n        erpc.eth_getBalance(address, hexBlockNumber).then((b) => {\n          if (b === null) { return; }\n          setBalance(b);\n        });\n        erpc.eth_getCode(address, hexBlockNumber).then((c) => {\n          if (c === null) { return; }\n          setCode(c);\n        });\n      }\n    });\n  }, [blockNumber, address, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then((blcks) => {\n      const txes = _.flatMap(blcks, \"transactions\");\n      const filteredTxes = _.filter(txes, (tx: any) => {\n        if (!tx) {\n          return false;\n        }\n        return tx.to === address || tx.from === address;\n      });\n      const sortedTxes = _.sortBy(filteredTxes, (tx: any) => {\n        return hexToNumber(tx.blockNumber);\n      }).reverse();\n      setTransactions(sortedTxes);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [from, to]);\n\n  if (transactionCount === undefined || balance === undefined || code === undefined) {\n    return <CircularProgress />;\n  }\n  return (\n    <>\n      <AddressView\n        address={address}\n        txCount={transactionCount ? hexToNumber(transactionCount) : 0}\n        balance={unit.fromWei(balance || 0, \"ether\")}\n        code={code}\n      />\n      <AddressTransactions\n        from={from}\n        to={to}\n        transactions={transactions}\n        disablePrev={blockNum >= blockNumber}\n        disableNext={blockNum === 0}\n        onPrev={() => {\n          const newQuery = blockNum + 100;\n          history.push(`/address/${address}/${newQuery}`);\n        }}\n        onNext={() => {\n          const newQuery = Math.max(blockNum - 100, 0);\n          history.push(`/address/${address}/${newQuery}`);\n        }}\n      />\n    </>\n  );\n};\n\nexport default Address;\n","import * as React from \"react\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport { useTranslation } from \"react-i18next\";\nimport { TableCell, TableRow } from \"@material-ui/core\";\n\nconst BigIntMinBy = (list: [], func: (item: any) => BigInt): any => {\n  let min: any;\n  for (const item of list) {\n    if (min === undefined) {\n      min = item;\n      continue;\n    }\n    const r = func(item);\n    if (r < func(min)) {\n      min = item;\n    }\n  }\n  return min;\n};\n\nconst BigIntMaxBy = (list: [], func: (item: any) => BigInt): any => {\n  let max: any;\n  for (const item of list) {\n    if (max === undefined) {\n      max = item;\n      continue;\n    }\n    const r = func(item);\n    if (r > func(max)) {\n      max = item;\n    }\n  }\n  return max;\n};\n\nfunction BlockGasPrice(props: any) {\n  const { t } = useTranslation();\n  const { transactions } = props.block;\n\n  if (transactions.length === 0) { return null; }\n\n  return (\n    <>\n      <TableRow>\n        <TableCell>{t(\"Min Gas Price\")}</TableCell>\n        <TableCell>\n          {hexToNumber(BigIntMinBy(transactions, (tx: any) => BigInt(tx.gasPrice))?.gasPrice || \"\")}\n        </TableCell>\n      </TableRow>\n\n      <TableRow>\n        <TableCell>{t(\"Max Gas Price\")}</TableCell>\n        <TableCell>\n          {hexToNumber(BigIntMaxBy(transactions, (tx: any) => BigInt(tx.gasPrice))?.gasPrice) || \"\"}\n        </TableCell>\n      </TableRow>\n    </>\n  );\n}\n\nexport default BlockGasPrice;\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport TxList from \"../TxList\";\nimport { hexToDate, hexToString, hexToNumber } from \"@etclabscore/eserialize\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Table, TableBody, TableCell, TableRow, Button, LinearProgress, Typography } from \"@material-ui/core\";\n\nimport BlockGasPrice from \"./BlockGasPrice\";\n\nfunction BlockView(props: any) {\n  const { block } = props;\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  if (!block) {\n    return (<div>Loading...</div>);\n  }\n\n  const {\n    timestamp, hash, parentHash, miner, nonce, difficulty,\n    extraData, stateRoot, transactionsRoot, receiptsRoot, transactions,\n    gasUsed, gasLimit, size,\n  } = block;\n\n  const filledPercent = (hexToNumber(gasUsed) / hexToNumber(gasLimit)) * 100;\n\n  return (\n    <div>\n      <Button\n        onClick={() => { history.push(`/block/${block.hash}/raw`); }}\n        style={{ position: \"absolute\", right: \"10px\", top: \"75px\" }}\n      >\n        View Raw\n      </Button>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>{t(\"Number\")}</TableCell>\n            <TableCell>{hexToNumber(block.number)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Gas Usage\")}</TableCell>\n            <TableCell>\n              <Typography variant=\"caption\">\n                {hexToNumber(gasUsed)}/{hexToNumber(gasLimit)}\n              </Typography>\n              <LinearProgress\n                style={{width: \"150px\"}}\n                value={filledPercent}\n                variant=\"determinate\"\n              />\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Timestamp\")}</TableCell>\n            <TableCell>\n              {t(\"Timestamp Date\", { date: hexToDate(timestamp) })}\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Hash\")}</TableCell>\n            <TableCell>{hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"ParentHash\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${parentHash}`}>\n                    {children}\n                  </RouterLink>\n                )}>\n                {parentHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Miner\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${miner}`}>\n                    {children}\n                  </RouterLink>\n                )}>\n                {miner}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <BlockGasPrice block={block} />\n\n          <TableRow>\n            <TableCell>{t(\"Gas Limit\")}</TableCell>\n            <TableCell>{hexToNumber(gasLimit)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Size\")}</TableCell>\n            <TableCell>{hexToNumber(size)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Nonce\")}</TableCell>\n            <TableCell>{hexToNumber(nonce)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Difficulty\")}</TableCell>\n            <TableCell>{hexToNumber(difficulty)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Extra Data\")}</TableCell>\n            <TableCell>{hexToString(extraData)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"State Root\")}</TableCell>\n            <TableCell>{stateRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Transaction Root\")}</TableCell>\n            <TableCell>{transactionsRoot}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Receipts Root\")}</TableCell>\n            <TableCell>{receiptsRoot}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <TxList transactions={transactions} />\n    </div>\n  );\n}\n\nexport default BlockView;\n","import BlockView from \"./BlockView\";\nexport default BlockView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport * as React from \"react\";\nimport BlockView from \"../components/BlockView\";\nimport { Block as IBlock } from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function Block(props: any) {\n  const { match: { params: { hash } } } = props;\n  const [block, setBlock] = React.useState<IBlock>();\n  const [erpc] = useEthRPCStore();\n\n  React.useEffect(() => {\n    if (erpc === undefined) { return; }\n    erpc.eth_getBlockByHash(hash, true).then((b) => {\n      if (b === null) { return; }\n      setBlock(b);\n    });\n  }, [hash, erpc]);\n\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockView block={block} />);\n}\n","import BigNumber from \"bignumber.js\";\n\nexport function hashesToGH(hashes: BigNumber) {\n  return parseInt((hashes.dividedBy(1000000000).toNumber()).toFixed(2), 10);\n}\n\nexport function weiToGwei(wei: any) {\n  if (wei === 0) {\n    return wei;\n  }\n\n  return wei / 1000000000;\n}\n","import HashRate from \"./HashRate\";\nexport default HashRate;\n","import BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\n\nexport default function HashRate(props: any) {\n  const { block, blockTime } = props;\n  return props.children(hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(blockTime)));\n}\n","import { grey } from \"@material-ui/core/colors\";\nimport { Theme } from \"@material-ui/core\";\n\nconst sansSerif = \"'Roboto', 'Helvetica Neue', Helvetica, sans-serif\";\n\nconst baseLabelStyles = {\n  fontFamily: sansSerif,\n  fontSize: 12,\n  letterSpacing: \"normal\",\n  padding: 10,\n  fill: grey[400],\n  stroke: \"transparent\",\n  strokeWidth: 0,\n};\n\nconst centeredLabelStyles = {\n  ...baseLabelStyles,\n  textAnchor: \"middle\",\n};\n\nconst getTheme = (theme: Theme) => ({\n  axis: {\n    style: {\n      axis: {\n        stroke: grey[400],\n        strokeWidth: 2,\n      },\n      axisLabel: {\n        ...centeredLabelStyles,\n      },\n      grid: {\n        stroke: \"none\",\n      },\n      ticks: {\n        stroke: grey[400],\n      },\n      tickLabels: {\n        padding: 5,\n        fill: grey[400],\n        strokeWidth: 1,\n      },\n    },\n  },\n  line: {\n    style: {\n      data: {\n        stroke: theme.palette.primary.main,\n        strokeWidth: 2,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n  bar: {\n    style: {\n      data: {\n        fill: theme.palette.primary.main,\n        stroke: theme.palette.primary.main,\n      },\n      labels: {\n        ...baseLabelStyles,\n      },\n    },\n  },\n});\n\nexport default getTheme;\n","import * as React from \"react\";\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\n\ninterface IProps {\n  children: any;\n  title: string;\n}\n\nconst ChartCard: React.FC<IProps> = (props) => {\n  return (\n    <Card style={{background: \"transparent\"}} elevation={0}>\n      <CardContent>\n        <Typography variant=\"h6\">{props.title}</Typography>\n        {props.children}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ChartCard;\n","import { Table, TableBody, TableCell, TableHead, TableRow, Typography, LinearProgress, Tooltip } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { hexToDate, hexToNumber, hexToString } from \"@etclabscore/eserialize\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst rightPaddingFix = {\n  paddingRight: \"24px\",\n};\n\nfunction BlockList({ blocks }: any) {\n  const { t } = useTranslation();\n  if (!blocks) {\n    return null;\n  }\n  const sortedBlocks = blocks.sort((a: { number: number }, b: { number: number }) => {\n    return b.number - a.number;\n  });\n  return (\n    <div style={{ width: \"100%\", overflowX: \"auto\" }}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell><Typography>{t(\"Author\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Block Number\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Timestamp\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"#Txs\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Gas Usage\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Gas Limit\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Uncles\")}</Typography></TableCell>\n            <TableCell><Typography>{t(\"Hash\")}</Typography></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {sortedBlocks.map((b: any, index: number) => {\n            const filledPercent = (hexToNumber(b.gasUsed) / hexToNumber(b.gasLimit)) * 100;\n\n            // Shorten hash views by concatenating first and last 4 chars.\n            const blockHashShort = b.hash.substring(2, 6) +\n              \"—\" + b.hash.substring(b.hash.length - 5, b.hash.length - 1);\n            const authorHashShort = b.miner.substring(2, 6) + \"—\" +\n              b.miner.substring(b.miner.length - 5, b.miner.length - 1);\n\n            // Colorize left border derived from author credit account.\n            const authorHashStyle = {\n              borderLeft: `1em solid #${b.miner.substring(2, 8)}`,\n            };\n\n            // Tally transactions which create contracts vs transactions with addresses.\n            const txTypes = {\n              create: 0,\n              transact: 0,\n            };\n\n            b.transactions.forEach((tx: any) => {\n              if (tx.to !== null) {\n                txTypes.transact++;\n              } else {\n                txTypes.create++;\n              }\n            });\n\n            // Calculate difference of block timestamp from that of parent.\n            let tdfp;\n\n            if (index === sortedBlocks.length - 1) {\n              tdfp = 0;\n            } else {\n              tdfp = hexToNumber(b.timestamp) -\n                hexToNumber(sortedBlocks[index + 1].timestamp);\n            }\n\n            return (\n              <TableRow key={b.number} style={authorHashStyle}>\n                <TableCell style={rightPaddingFix}>\n                  <Typography>\n                    <Link\n                      component={({ className, children }: { children: any, className: string }) => (\n                        <RouterLink className={className} to={`/address/${b.miner}`} >\n                          {children}\n                        </RouterLink>\n                      )}>\n                      {authorHashShort}\n                    </Link>\n                    &nbsp;<sup>{hexToString(b.extraData).substring(0, 20)}</sup>\n                  </Typography>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  <Link\n                    component={({ className, children }: { children: any, className: string }) => (\n                      <RouterLink className={className} to={`/block/${b.hash}`} >\n                        {children}\n                      </RouterLink>\n                    )}>\n                    {parseInt(b.number, 16)}\n                  </Link>\n                </TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <Typography>{t(\"Timestamp Date\", { date: hexToDate(b.timestamp) })}\n                    &nbsp;\n                    <sub>({tdfp > 0 ? `+${tdfp}` : `-${tdfp}`}s)</sub>\n                  </Typography>\n                </TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <Tooltip\n                    title={t(\"Create Transactions\", {count: txTypes.create}) as string}\n                    placement=\"top\"\n                  >\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      {txTypes.create === 0 ? \"\" : txTypes.create}\n                    </Typography>\n                  </Tooltip>\n                  <Typography>{txTypes.transact}</Typography>\n                </TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <LinearProgress value={filledPercent} variant=\"determinate\" />\n                </TableCell>\n                <TableCell>\n                  <Typography>{hexToNumber(b.gasLimit)}</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography>{b.uncles.length === 0 ? \"\" : b.uncles.length}</Typography>\n                </TableCell>\n                <TableCell style={rightPaddingFix}>\n                  <Link\n                    component={({ className, children }: { children: any, className: string }) => (\n                      <RouterLink className={className} to={`/block/${b.hash}`} >\n                        {children}\n                      </RouterLink>\n                    )}>\n                    {blockHashShort}\n                  </Link>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n\n  );\n}\n\nexport default BlockList;\n","import BlockList from \"./BlockList\";\nexport default BlockList;\n","import { CircularProgress, Grid, IconButton } from \"@material-ui/core\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport * as React from \"react\";\nimport BlockList from \"../components/BlockList\";\nimport getBlocks from \"../helpers\";\nimport { ArrowForwardIos, ArrowBackIos } from \"@material-ui/icons\";\nimport { Block as IBlock } from \"@etclabscore/ethereum-json-rpc\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  disablePrev: boolean;\n  disableNext: boolean;\n  style?: any;\n  onNext?: any;\n  onPrev?: any;\n}\n\nexport default function BlockListContainer(props: IProps) {\n  const { from, to, style } = props;\n  const [erpc] = useEthRPCStore();\n  const [blocks, setBlocks] = React.useState<IBlock[]>();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(from, to, erpc).then(setBlocks);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [from, to]);\n\n  if (!blocks) {\n    return <CircularProgress />;\n  }\n  return (\n    <div style={style}>\n      <Grid container justify=\"flex-end\">\n        <IconButton onClick={props.onPrev} disabled={props.disablePrev}>\n          <ArrowBackIos />\n        </IconButton>\n        <IconButton onClick={props.onNext} disabled={props.disableNext}>\n          <ArrowForwardIos />\n        </IconButton>\n      </Grid>\n      <BlockList blocks={blocks} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { hashesToGH } from \"../formatters\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport { Grid } from \"@material-ui/core\";\nimport ChartCard from \"../ChartCard\";\nimport { VictoryLine, VictoryBar, VictoryChart } from \"victory\";\nimport { useTranslation } from \"react-i18next\";\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst blockMapGasUsed = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: new BigNumber(block.gasUsed).dividedBy(1000000),\n  };\n};\n\nconst blockMapUncles = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: block.uncles.length,\n  };\n};\n\nconst blockMapHashRate = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: hashesToGH(new BigNumber(block.difficulty, 16).dividedBy(config.blockTime)),\n  };\n};\n\nconst blockMapTransactionCount = (block: any) => {\n  return {\n    x: hexToNumber(block.number),\n    y: block.transactions.length,\n  };\n};\n\ninterface IProps {\n  blocks: any[];\n  victoryTheme?: any;\n}\n\nconst StatCharts: React.FC<IProps> = ({ blocks, victoryTheme }) => {\n  const { t } = useTranslation();\n  return (\n    <Grid item container>\n      <Grid key=\"hashChart\" item xs={12} md={6} lg={3}>\n        <ChartCard title={t(\"Hash Rate\")}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n            <VictoryLine data={blocks.map(blockMapHashRate)} />\n          </VictoryChart>\n        </ChartCard>\n      </Grid>\n      <Grid key=\"txChart\" item xs={12} md={6} lg={3}>\n        <ChartCard title={t(\"Transaction count\")}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n            <VictoryBar data={blocks.map(blockMapTransactionCount)} />\n          </VictoryChart>\n        </ChartCard>\n      </Grid>\n      <Grid key=\"gasUsed\" item xs={12} md={6} lg={3}>\n        <ChartCard title={t(\"Gas Used\")}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n            <VictoryBar data={blocks.map(blockMapGasUsed)} />\n          </VictoryChart>\n        </ChartCard>\n      </Grid>\n      <Grid key=\"uncles\" item xs={12} md={6} lg={3}>\n        <ChartCard title={t(\"Uncles\")}>\n          <VictoryChart height={config.chartHeight} width={config.chartWidth} theme={victoryTheme as any}>\n            <VictoryBar data={blocks.map(blockMapUncles)} />\n          </VictoryChart>\n        </ChartCard>\n      </Grid>\n      \n    </Grid>\n  );\n};\n\nexport default StatCharts;\n","import StatCharts from \"./StatCharts\";\nexport default StatCharts;\n","import { Grid, Typography, CircularProgress, Theme, Button } from \"@material-ui/core\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport * as React from \"react\";\nimport { weiToGwei } from \"../components/formatters\";\nimport HashRate from \"../components/HashRate\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport useInterval from \"use-interval\";\nimport { useTheme } from \"@material-ui/styles\";\nimport getTheme from \"../themes/victoryTheme\";\nimport ChartCard from \"../components/ChartCard\";\nimport BlockListContainer from \"./BlockList\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport { useTranslation } from \"react-i18next\";\nimport { ArrowForwardIos } from \"@material-ui/icons\";\nimport StatCharts from \"../components/StatCharts\";\nimport { Block as IBlock, IsSyncingResult as ISyncing} from \"@etclabscore/ethereum-json-rpc\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nexport default (props: any) => {\n  const [erpc] = useEthRPCStore();\n  const theme = useTheme<Theme>();\n  const victoryTheme = getTheme(theme);\n  const [blockNumber] = useBlockNumber(erpc);\n  const [chainId, setChainId] = useState<string>();\n  const [block, setBlock] = useState<IBlock>();\n  const [blocks, setBlocks] = useState<IBlock[]>();\n  const [gasPrice, setGasPrice] = useState<string>();\n  const [syncing, setSyncing] = useState<ISyncing>();\n  const [peerCount, setPeerCount] = useState<string>();\n  const [ecoFund, setEcoFund] = useState<string>();\n  const { t } = useTranslation();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_chainId().then((cid) => {\n      if (cid === null) { return; }\n      setChainId(cid);\n    });\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === undefined) { return; }\n    erpc.eth_getBlockByNumber(`0x${blockNumber.toString(16)}`, true).then((b) => {\n      if (b === null) { return; }\n      setBlock(b);\n      // SET echo fund\n      erpc.eth_getBalance(\"0xEfED0A3e602a67a756d5f92A3BA7dEe976106309\", `0x${blockNumber.toString(16)}`).then((b) => {\n        if (b === null) { return; }\n        // from hex\n        setEcoFund((hexToNumber(b) / 1000000000000000000).toString());\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [blockNumber]);\n\n  React.useEffect(() => {\n    if (!erpc || blockNumber === null) { return; }\n    getBlocks(\n      Math.max(blockNumber - config.blockHistoryLength + 1, 0),\n      blockNumber,\n      erpc,\n    ).then((bl) => {\n      setBlocks(bl);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [blockNumber]);\n\n  useInterval(() => {\n    if (!erpc) { return; }\n    erpc.eth_syncing().then(setSyncing);\n  }, 10000, true);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.net_peerCount().then(setPeerCount);\n  }, [erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_gasPrice().then(setGasPrice);\n  }, [erpc]);\n\n  if (blocks === undefined || chainId === undefined || gasPrice === undefined || peerCount === undefined) {\n    return <CircularProgress />;\n  }\n  // set ecoFund\n\n  return (\n    <div>\n      <Grid container spacing={3} direction=\"column\">\n        <Grid item container justify=\"space-between\">\n          <Grid item key=\"blockHeight\">\n            <ChartCard title={t(\"Block Height\")}>\n              <Typography variant=\"h4\">{blockNumber}</Typography>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"eco\" item>\n            <ChartCard title={t(\"ECO fund\")}>\n              <Typography variant=\"h6\">\n                <a href=\"/address/0xEfED0A3e602a67a756d5f92A3BA7dEe976106309\" style={{ color: \"inherit\" }}>\n                {ecoFund}</a> AVS\n              </Typography>\n              <Typography variant=\"h4\"><small><small><small>5% of block reward is used for funding ECO projects</small></small></small></Typography>\n            </ChartCard>\n          </Grid>\n          {syncing &&\n            <div key=\"syncing\">\n              <ChartCard title={t(\"Syncing\")}>\n                {typeof syncing === \"object\" && syncing.currentBlock &&\n                  <Typography variant=\"h4\">\n                    {hexToNumber(syncing.currentBlock)} / {hexToNumber(syncing.highestBlock || \"0x0\")}\n                  </Typography>\n                }\n              </ChartCard>\n            </div>\n          }\n          <Grid key=\"gasPrice\" item>\n            <ChartCard title={t(\"Gas Price\")}>\n              <Typography variant=\"h4\">{weiToGwei(hexToNumber(gasPrice))} Gwei</Typography>\n            </ChartCard>\n          </Grid>\n          <Grid key=\"hRate\" item>\n            <ChartCard title={t(\"Network Hash Rate\")}>\n              {block &&\n                <HashRate block={block} blockTime={config.blockTime}>\n                  {(hashRate: any) => <Typography variant=\"h4\">{hashRate} GH/s</Typography>}\n                </HashRate>\n              }\n            </ChartCard>\n          </Grid>\n          <Grid key=\"peers\" item>\n            <ChartCard title={t(\"Peers\")}>\n              <Typography variant=\"h4\">{hexToNumber(peerCount)}</Typography>\n            </ChartCard>\n          </Grid>\n        </Grid>\n      </Grid>\n      <StatCharts victoryTheme={victoryTheme} blocks={blocks} />\n      <Grid container justify=\"flex-end\">\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          endIcon={<ArrowForwardIos />}\n          onClick={() => props.history.push(\"/stats/miners\")}\n        >More Stats</Button>\n      </Grid>\n      <br />\n\n      <BlockListContainer\n        from={Math.max(blockNumber - 14, 0)}\n        to={blockNumber}\n        disablePrev={true}\n        disableNext={blockNumber < 14}\n        onNext={() => {\n          props.history.push(`/blocks/${blockNumber - 15}`);\n        }}\n        style={{ marginTop: \"30px\" }} />\n    </div >\n  );\n};\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport { useBlockNumber } from \"../helpers\";\nimport BlockList from \"./BlockList\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport { useParams } from \"react-router-dom\";\n\ninterface IUrlParams {\n  number: string | undefined;\n}\n\nexport default function NodeView(props: any) {\n  const [erpc] = useEthRPCStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const urlParams = useParams<IUrlParams>();\n\n  let blockNum = blockNumber;\n  if (urlParams && urlParams.number !== undefined) {\n    try {\n      blockNum = parseInt(urlParams.number, 10);\n    } catch (e) {\n      console.error(\"Unable to parse block number from URL\");\n    }\n  }\n\n  React.useEffect(() => {\n    if (blockNum === undefined || blockNumber === undefined) {\n      return;\n    }\n    if (blockNum > blockNumber) {\n      props.history.push(`/blocks/${blockNumber}`);\n    }\n    if (blockNum < 0) {\n      props.history.push(\"/blocks/0\");\n    }\n  }, [blockNumber, blockNum, props.history]);\n  if (blockNumber === undefined || blockNum > blockNumber) {\n    return (<CircularProgress />);\n  }\n  return (\n    <BlockList\n      from={Math.max(blockNum - 14, 0)}\n      to={blockNum}\n      disablePrev={blockNum >= blockNumber}\n      disableNext={blockNum === 0}\n      onPrev={() => {\n        const newQuery = blockNum + 15;\n        props.history.push(`/blocks/${newQuery}`);\n      }}\n      onNext={() => {\n        const newQuery = Math.max(blockNum - 15, 0);\n        props.history.push(`/blocks/${newQuery}`);\n      }}\n    />\n  );\n}\n","import * as React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport { Table, TableBody, TableCell, TableRow, Typography, Button } from \"@material-ui/core\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\nconst unit = require(\"ethjs-unit\"); //tslint:disable-line\n\nexport interface ITxViewProps {\n  tx: any;\n  receipt: any | null;\n}\n\nfunction TxView(props: ITxViewProps) {\n  const { tx, receipt } = props;\n  const { t } = useTranslation();\n  const history = useHistory();\n  if (!tx) {\n    return null;\n  }\n\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          history.push(`/tx/${tx.hash}/raw`);\n        }}\n        style={{ position: \"absolute\", right: \"10px\", top: \"75px\" }}\n      >View Raw</Button>\n      <Typography variant=\"h6\">Transaction</Typography>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>{t(\"Hash\")}</TableCell>\n            <TableCell>{tx.hash}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Block\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/block/${tx.blockHash}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.blockHash}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Block Number\")}</TableCell>\n            <TableCell>{hexToNumber(tx.blockNumber)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Gas\")}</TableCell>\n            <TableCell>{hexToNumber(tx.gas)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Gas Price\")}</TableCell>\n            <TableCell>{hexToNumber(tx.gasPrice)} Wei</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Value\")}</TableCell>\n            <TableCell>{unit.fromWei(tx.value, \"ether\")} Ether</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"From\")}</TableCell>\n            <TableCell>\n              <Link\n                component={({ className, children }: { children: any, className: string }) => (\n                  <RouterLink className={className} to={`/address/${tx.from}`} >\n                    {children}\n                  </RouterLink>\n                )}>\n                {tx.from}\n              </Link>\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"To\")}</TableCell>\n            <TableCell>\n              {tx.to !== null ?\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${tx.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {tx.to}\n                </Link>\n                : null\n              }\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Nonce\")}</TableCell>\n            <TableCell>{hexToNumber(tx.nonce)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Transaction Index\")}</TableCell>\n            <TableCell>{hexToNumber(tx.transactionIndex)}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>{t(\"Input\")}</TableCell>\n            <TableCell>{tx.input}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>v</TableCell>\n            <TableCell>{tx.v}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>r</TableCell>\n            <TableCell>{tx.r}</TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>s</TableCell>\n            <TableCell>{tx.s}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <br />\n      <Typography variant=\"h6\">Receipt</Typography>\n      {receipt &&\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>{t(\"Hash\")}</TableCell>\n              <TableCell>{receipt.transactionHash}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Block\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/block/${receipt.blockHash}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.blockHash}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Block Number\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.blockNumber)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Gas Used\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.gasUsed)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Cumulative Gas Used\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.cumulativeGasUsed)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Value\")}</TableCell>\n              <TableCell>{unit.fromWei(tx.value, \"ether\")} Ether</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"From\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.from}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.from}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"To\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.to}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.to}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Contract Address\")}</TableCell>\n              <TableCell>\n                <Link\n                  component={({ className, children }: { children: any, className: string }) => (\n                    <RouterLink className={className} to={`/address/${receipt.contractAddress}`} >\n                      {children}\n                    </RouterLink>\n                  )}>\n                  {receipt.contractAddress}\n                </Link>\n              </TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Transaction Index\")}</TableCell>\n              <TableCell>{hexToNumber(receipt.transactionIndex)}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Receipt Status\")}</TableCell>\n              <TableCell>{receipt.status}</TableCell>\n            </TableRow>\n\n            <TableRow>\n              <TableCell>{t(\"Receipt Logs\")}</TableCell>\n              <TableCell>\n                {receipt.logs.length}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      }\n    </div>\n  );\n}\n\nexport default TxView;\n","import TxView from \"./TxView\";\nexport default TxView;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport TxView from \"../components/TxView\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport {\n  Transaction as ITransaction,\n  TransactionReceiptOrNull as ITransactionReceipt,\n} from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function TransactionContainer(props: any) {\n  const hash = props.match.params.hash;\n  const [erpc] = useEthRPCStore();\n  const [transaction, setTransaction] = React.useState<ITransaction>();\n  const [receipt, setReceipt] = React.useState<ITransactionReceipt>();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then((tx) => {\n      if (tx === null) { return; }\n      setTransaction(tx);\n    });\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then((r) => {\n      if (r === null) { return; }\n      setReceipt(r);\n    });\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxView tx={transaction} receipt={receipt} />);\n}\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = responsiveFontSizes(createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiAppBar: {\n      root: {\n        background: \"#fff !important\",\n      },\n    },\n  },\n  palette: {\n    background: {\n      default: \"#fff\",\n    },\n  },\n}));\n\nexport const darkTheme = responsiveFontSizes(createMuiTheme({\n  props: {\n    MuiAppBar: {\n      position: \"sticky\",\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiTable: {\n      root: {\n        background: \"transparent !important\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[400],\n      },\n    },\n  },\n}));\n\nexport default {\n  darkTheme,\n  lightTheme,\n};\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport enJSON from \"./translations/en\";\nimport krJSON from \"./translations/kr\";\nimport cnJSON from \"./translations/cn\";\nimport moment from \"moment\";\nimport \"moment/locale/ko\";\nimport \"moment/locale/zh-cn\";\nimport \"moment/locale/en-ca\";\nimport i18next from \"i18next\";\n\ninterface IMap {\n  [key: string]: string;\n}\n\nconst momentMap: IMap = {\n  \"kr\": \"ko\",\n  \"cn\": \"zh-cn\",\n  \"en-US\": \"en-ca\",\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: { translation: enJSON },\n      kr: { translation: krJSON },\n      cn: { translation: cnJSON },\n    },\n    interpolation: {\n      escapeValue: false,\n      format: (value, format, lng) => {\n        if (!lng) {\n          return;\n        }\n        if (format !== \"date\") {\n          return;\n        }\n        const ln = momentMap[lng];\n        const result = moment(value).locale(ln || \"en\").format(\"MMMM Do YYYY, h:mm:ss a\");\n        return result as any;\n      },\n    },\n  });\n\nexport const reverseSupportedLanguages: IMap = {\n  \"EN\": \"en-US\", //tslint:disable-line\n  \"中文\": \"cn\", //tslint:disable-line\n  \"한국어\": \"kr\", //tslint:disable-line\n};\n\nexport const supportedLanguages: IMap = {\n  \"en-US\": \"EN\",\n  \"cn\": \"中文\",\n  \"kr\": \"한국어\",\n};\n\nexport const changeLanguage = (l: string) => {\n  return i18next.changeLanguage(l);\n};\n","export default {\n  // Moment integration\n  \"Timestamp Date\": \"{{date, date}}\",\n  \"Change Language\": \"Change Language\",\n  \"Enter an Address, Transaction Hash or Block Number\": \"🔎 Enter an Address, Transaction Hash or Block Number\",\n  \"JSON-RPC API Documentation\": \"JSON-RPC API Documentation\",\n  \"Expedition Github\": \"Expedition Github\",\n  \"Toggle Dark Mode\": \"Toggle Dark Mode\",\n  \"Block Height\": \"Block Height\",\n  \"Chain ID\": \"Chain ID\",\n  \"Syncing\": \"Syncing\",\n  \"Gas Price\": \"Gas Price\",\n  \"Network Hash Rate\": \"Network Hash Rate\",\n  \"Peers\": \"Peers\",\n  \"Hash Rate\": \"Hash Rate\",\n  \"Transaction Count\": \"Transaction Count\",\n  \"Gas Usage\": \"Gas Usage\",\n  \"Uncles\": \"Uncles\",\n  \"Top Miners\": \"Top Miners\",\n  \"Top Miners by extraData\": \"Top Miners by extraData\",\n  \"Top Miners by Address\": \"Top Miners by Address\",\n  \"Block Number\": \"Block Number\",\n  \"Hash\": \"Hash\",\n  \"Timestamp\": \"Timestamp\",\n  \"Transactions\": \"Transactions\",\n  \"Number\": \"Number\",\n  \"ParentHash\": \"ParentHash\",\n  \"Miner\": \"Miner\",\n  \"Nonce\": \"Nonce\",\n  \"Difficulty\": \"Difficulty\",\n  \"Extra Data\": \"Extra Data\",\n  \"State Root\": \"State Root\",\n  \"Transaction Root\": \"Transaction Root\",\n  \"Receipts Root\": \"Receipts Root\",\n  \"Block\": \"Block\",\n  \"Gas Used\": \"Gas Used\",\n  \"Cumulative Gas Used\": \"Cumulative Gas Used\",\n  \"Value in Ether\": \"Value in Ether\",\n  \"From\": \"From\",\n  \"To\": \"To\",\n  \"Contract Address\": \"Contract Address\",\n  \"Transaction Index\": \"Transaction Index\",\n  \"Receipt Status\": \"Receipt Status\",\n  \"Receipt Logs\": \"Receipt Logs\",\n  \"No Transactions for this block range.\": \"No Transactions for this block range.\",\n  \"Address\": \"Address\",\n  \"Balance\": \"Balance\",\n  \"Code\": \"Code\",\n  \"Configuration\": \"Configuration\",\n  \"Back\": \"Back\",\n  \"Ethereum RPC\": \"Ethereum RPC\",\n  \"Service Runner RPC\": \"Service Runner RPC\",\n};\n","export default {\n  // Moment integration\n  \"Timestamp Date\": \"{{date, date}}\",\n  // App Bar\n  \"Change Language\": \"언어 변경\",\n  \"Enter an Address, Transaction Hash or Block Number\": \"거래주소 해시값 혹은 블록번호 입력\",\n  \"JSON-RPC API Documentation\": \"JSON-RPC API 문서\",\n  \"Expedition Github\": \"Expedition Github\",\n  \"Toggle Dark Mode\": \"블랙모드 변경\",\n  // Dashboard\n  \"Block Height\": \"블록높이\",\n  \"Chain ID\": \"Chain ID\",\n  \"Syncing\": \"동기화\",\n  \"Gas Price\": \"Gas 비용\",\n  \"Network Hash Rate\": \"해시파워\",\n  \"Peers\": \"거점\",\n  \"Hash Rate\": \"Hash Rate\",\n  \"Transaction Count\": \"Transaction Count\",\n  \"Gas Usage\": \"Gas Usage\",\n  \"Uncles\": \"Uncles\",\n  \"Top Miners\": \"Top Miners\",\n  \"Top Miners by extraData\": \"Top Miners by extraData\",\n  \"Top Miners by Address\": \"Top Miners by Address\",\n  // block list\n  \"Block Number\": \"블록번호\",\n  \"Hash\": \"해시\",\n  \"Timestamp\": \"타임 스탬프\",\n  \"Transactions\": \"거래\",\n  // block view\n  \"Number\": \"수량\",\n  \"ParentHash\": \"ParentHash\",\n  \"Miner\": \"마이너\",\n  \"Nonce\": \"목하\",\n  \"Difficulty\": \"난이도\",\n  \"Extra Data\": \"추가 데이터\",\n  \"State Root\": \"주 루트\",\n  \"Transaction Root\": \"거래 루트\",\n  \"Receipts Root\": \"영수 루트\",\n  // transaction view\n  \"Block\": \"블록\",\n  \"Gas Used\": \"Gas 소모\",\n  \"Cumulative Gas Used\": \"누적 Gas소모\",\n  \"Value in Ether\": \"Ether값\",\n  \"From\": \"부터\",\n  \"To\": \"으로\",\n  \"Contract Address\": \"계약주소\",\n  \"Transaction Index\": \"거래 인덱스\",\n  \"Receipt Status\": \"수신상태\",\n  \"Receipt Logs\": \"수신일지\",\n  // address view\n  \"No Transactions for this block range.\": \"No Transactions for this block range.\",\n  \"Address\": \"주소\",\n  \"Balance\": \"잔액\",\n  \"Code\": \"코드\",\n  // configuration menu\n  \"Configuration\": \"구성\",\n  \"Back\": \"뒤로\",\n  \"Ethereum RPC\": \"Ethereum RPC\",\n  \"Service Runner RPC\": \"Service Runner RPC\",\n};\n","export default {\n  // Moment integration\n  \"Timestamp Date\": \"{{date, date}}\",\n  // App Bar\n  \"Change Language\": \"更改语言\",\n  \"Enter an Address, Transaction Hash or Block Number\": \"输入地址 交易哈希或区块号\",\n  \"JSON-RPC API Documentation\": \"JSON-RPC API 文档\",\n  \"Expedition Github\": \"Expedition Github\",\n  \"Toggle Dark Mode\": \"切换黑暗模式\",\n  // Dashboard\n  \"Block Height\": \"区块高度\",\n  \"Chain ID\": \"Chain ID\",\n  \"Syncing\": \"同步中\",\n  \"Gas Price\": \"Gas 费用\",\n  \"Network Hash Rate\": \"算力\",\n  \"Peers\": \"端点\",\n  \"Hash Rate\": \"Hash Rate\",\n  \"Transaction Count\": \"Transaction Count\",\n  \"Gas Usage\": \"Gas Usage\",\n  \"Uncles\": \"Uncles\",\n  \"Top Miners\": \"Top Miners\",\n  \"Top Miners by extraData\": \"Top Miners by extraData\",\n  \"Top Miners by Address\": \"Top Miners by Address\",\n  // block list\n  \"Block Number\": \"区块编号\",\n  \"Hash\": \"哈希\",\n  \"Timestamp\": \"时间戳\",\n  \"Transactions\": \"交易\",\n  // block view\n  \"Number\": \"数量\",\n  \"ParentHash\": \"父哈希\",\n  \"Miner\": \"矿工\",\n  \"Nonce\": \"随机数\",\n  \"Difficulty\": \"难度\",\n  \"Extra Data\": \"额外数据\",\n  \"State Root\": \"状态根\",\n  \"Transaction Root\": \"交易根\",\n  \"Receipts Root\": \"接收根\",\n  // transaction view\n  \"Block\": \"区块\",\n  \"Gas Used\": \"Gas 消耗\",\n  \"Cumulative Gas Used\": \"累计Gas消耗\",\n  \"Value in Ether\": \"Ether值\",\n  \"From\": \"从\",\n  \"To\": \"到\",\n  \"Contract Address\": \"合约地址\",\n  \"Transaction Index\": \"交易索引\",\n  \"Receipt Status\": \"接收状态\",\n  \"Receipt Logs\": \"接收日志\",\n  // address view\n  \"Address\": \"地址\",\n  \"Balance\": \"余额\",\n  \"Code\": \"代码\",\n  \"No Transactions for this block range.\": \"No Transactions for this block range.\",\n  // configuration menu\n  \"Configuration\": \"配置\",\n  \"Back\": \"返回\",\n  \"Ethereum RPC\": \"Ethereum RPC\",\n  \"Service Runner RPC\": \"Service Runner RPC\",\n};\n","import LanguageMenu from \"./LanguageMenu\";\nexport default LanguageMenu;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLanguages, reverseSupportedLanguages } from \"../../i18n\";\n\nconst LanguageMenu: React.FC = (props) => {\n  const { t, i18n } = useTranslation();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (lang: string) => {\n    setAnchorEl(null);\n    // this forces language change for react + i18n react\n    i18n.changeLanguage(reverseSupportedLanguages[lang]);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Change Language\") as string}>\n        <Button onClick={handleClick}>{supportedLanguages[i18n.language]}</Button>\n      </Tooltip>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {Object.values(supportedLanguages).map((lang, i) => (\n          <MenuItem onClick={(event) => handleMenuItemClick(lang)}>{lang}</MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default LanguageMenu;\n","import * as React from \"react\";\nimport { Menu, MenuItem, Tooltip, Button, Typography } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { IChain as Chain } from \"../../models/chain\";\n\ninterface IProps {\n  chains: Chain[];\n  selected: Chain;\n  onChange: (chain: Chain) => void;\n}\n\nconst ITEM_HEIGHT = 48;\n\nconst ChainDropdown: React.FC<IProps> = (props: IProps) => {\n  const { t } = useTranslation();\n  const { selected, onChange, chains } = props;\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (chain: Chain) => {\n    setAnchorEl(null);\n    onChange(chain);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Tooltip title={t(\"Switch Chain\") as string}>\n        <Button onClick={handleClick}>{selected.name}</Button>\n      </Tooltip>\n\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: ITEM_HEIGHT * 10.5,\n          },\n        }}\n      >\n        {chains.map((chain, i) => (\n          <MenuItem\n            key={chain.name}\n            selected={selected && selected.name === chain.name}\n            onClick={() => handleMenuItemClick(chain)}\n          >\n            <div>\n              <Typography variant=\"body1\">{chain.name}</Typography>\n              <Typography variant=\"caption\">{chain.network}</Typography>\n            </div>\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default ChainDropdown;\n","import { History, LocationDescriptor, LocationDescriptorObject } from \"history\";\nimport queryString from \"query-string\";\n\ntype LocationState = History.LocationState;\n\ntype CreateHistory<O, H> = (options?: O) => History & H;\n\nfunction preserveQueryParameters(\n  history: History,\n  preserve: string[],\n  location: LocationDescriptorObject,\n): LocationDescriptorObject {\n  const currentQuery = queryString.parse(window.location.search);\n  if (currentQuery) {\n    const preservedQuery: { [key: string]: any } = {};\n    for (const p of preserve) {\n      const v = currentQuery[p];\n      if (v) {\n        preservedQuery[p] = v;\n      }\n    }\n    if (location.search) {\n      Object.assign(preservedQuery, queryString.parse(location.search));\n    }\n    location.search = queryString.stringify(preservedQuery);\n  }\n  return location;\n}\n\nfunction createLocationDescriptorObject(location: LocationDescriptor, state?: LocationState): LocationDescriptorObject {\n  return typeof location === \"string\" ? { pathname: location, state } : location;\n}\n\nexport function createPreserveQueryHistory<O, H>(\n  createHistory: CreateHistory<O, H>,\n  queryParameters: string[],\n): CreateHistory<O, H> {\n  return (options?: O) => {\n    const history = createHistory(options);\n    const oldPush = history.push;\n    const oldReplace = history.replace;\n    history.push = (path: LocationDescriptor, state?: LocationState) =>\n      oldPush.apply(history, [\n        preserveQueryParameters(history, queryParameters, createLocationDescriptorObject(path, state)),\n      ]);\n    history.replace = (path: LocationDescriptor, state?: LocationState) =>\n      oldReplace.apply(history, [\n        preserveQueryParameters(history, queryParameters, createLocationDescriptorObject(path, state)),\n      ]);\n    return history;\n  };\n}\n","import BlockRaw from \"./BlockRaw\";\nexport default BlockRaw;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\nimport Editor from \"@monaco-editor/react\";\nimport useDarkMode from \"use-dark-mode\";\n\ninterface IProps {\n  block: any;\n}\n\nconst BlockRaw: React.FC<IProps> = (props) => {\n  const history = useHistory();\n  const darkMode = useDarkMode();\n  const { block } = props;\n\n  return (\n    <div style={{ margin: \"0px -25px 0px -25px\" }}>\n      <Button\n        onClick={() => {\n          history.push(`/block/${block.hash}`);\n        }}\n        style={{ position: \"absolute\", right: \"10px\", top: \"75px\", zIndex: 1 }}\n      >View Block</Button>\n      <Editor\n        options={{\n          minimap: {\n            enabled: false,\n          },\n          wordWrap: \"on\",\n          lineNumbers: \"off\",\n          wrappingIndent: \"deepIndent\",\n          readOnly: true,\n          showFoldingControls: \"always\",\n        }}\n        theme={darkMode.value ? \"dark\" : \"light\"}\n        width=\"100vw\"\n        height=\"93vh\"\n        language=\"json\"\n        value={JSON.stringify(block, null, 4)}\n      />\n    </div>\n  );\n};\n\nexport default BlockRaw;\n","import { CircularProgress } from \"@material-ui/core\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport * as React from \"react\";\nimport BlockRaw from \"../components/BlockRaw\";\nimport { Block as IBlock } from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function BlockRawContainer(props: any) {\n  const { match: { params: { hash } } } = props;\n  const [erpc] = useEthRPCStore();\n  const [block, setBlock] = React.useState<IBlock>();\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getBlockByHash(hash, true).then((b) => {\n      if (b === null) { return; }\n      setBlock(b);\n    });\n  }, [hash, erpc]);\n  if (!block) { return (<CircularProgress />); }\n  return (<BlockRaw block={block} />);\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport Editor from \"@monaco-editor/react\";\nimport useDarkMode from \"use-dark-mode\";\nimport { Transaction } from \"@etclabscore/ethereum-json-rpc\";\n\ninterface IProps {\n  tx: Transaction;\n  receipt: any;\n}\n\nconst TxRaw: React.FC<IProps> = (props) => {\n  const history = useHistory();\n  const darkMode = useDarkMode();\n  const { tx, receipt } = props;\n\n  return (\n    <div style={{ margin: \"0px -25px 0px -25px\" }}>\n      <Button\n        onClick={() => {\n          history.push(`/tx/${tx.hash}`);\n        }}\n        style={{ position: \"absolute\", right: \"10px\", top: \"75px\", zIndex: 1 }}\n      >View Transaction</Button>\n      <br />\n      <Typography variant=\"h5\" gutterBottom style={{ marginLeft: \"10px\" }}>Transaction</Typography>\n      <br />\n      <Editor\n        options={{\n          minimap: {\n            enabled: false,\n          },\n          lineNumbers: \"off\",\n          wordWrap: \"on\",\n          wrappingIndent: \"deepIndent\",\n          readOnly: true,\n          showFoldingControls: \"always\",\n        }}\n        theme={darkMode.value ? \"dark\" : \"light\"}\n        width=\"100vw\"\n        height=\"35vh\"\n        language=\"json\"\n        value={JSON.stringify(tx, null, 4)}\n      />\n      <br />\n      <Typography variant=\"h6\" gutterBottom style={{ marginLeft: \"10px\" }}>Receipt</Typography>\n      <br />\n      <Editor\n        options={{\n          minimap: {\n            enabled: false,\n          },\n          lineNumbers: \"off\",\n          wordWrap: \"on\",\n          wrappingIndent: \"deepIndent\",\n          readOnly: true,\n          showFoldingControls: \"always\",\n        }}\n        theme={darkMode.value ? \"dark\" : \"light\"}\n        width=\"100vw\"\n        height=\"35vh\"\n        language=\"json\"\n        value={JSON.stringify(receipt, null, 4)}\n      />\n    </div>\n  );\n};\n\nexport default TxRaw;\n","import { CircularProgress } from \"@material-ui/core\";\nimport * as React from \"react\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport TxRaw from \"../components/TxRaw/TxRaw\";\nimport {\n  Transaction as ITransaction,\n  TransactionReceiptOrNull as ITransactionReceipt,\n} from \"@etclabscore/ethereum-json-rpc\";\n\nexport default function TransactionRawContainer(props: any) {\n  const hash = props.match.params.hash;\n  const [erpc] = useEthRPCStore();\n  const [transaction, setTransaction] = React.useState<ITransaction>();\n  const [receipt, setReceipt] = React.useState<ITransactionReceipt>();\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionByHash(hash).then((tx) => {\n      if (tx === null) { return; }\n      setTransaction(tx);\n    });\n  }, [hash, erpc]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_getTransactionReceipt(hash).then((r) => {\n      if (r === null) { return; }\n      setReceipt(r);\n    });\n  }, [hash, erpc]);\n\n  if (!transaction || !receipt) {\n    return (<CircularProgress />);\n  }\n\n  return (<TxRaw tx={transaction} receipt={receipt} />);\n}\n","import React from \"react\";\nimport { VictoryTooltip } from \"victory\";\n\nclass CustomPieChartLabel extends React.Component {\n  public static defaultEvents = (VictoryTooltip as any).defaultEvents;\n  public render() {\n    return (\n      <>\n        {(this.props as any).defaultActive &&\n          <VictoryTooltip\n            {...(this.props as any)}\n            active={(this.props as any).defaultActive &&\n              (this.props as any).defaultActive.x === (this.props as any).datum.x}\n            text={`${(this.props as any).datum.x}\\n${(this.props as any).datum.y}`}\n            cornerRadius={5}\n            height={40}\n            flyoutStyle={{\n              stroke: \"none\",\n            }}\n          />\n        }\n        <VictoryTooltip\n          {...(this.props as any)}\n          // active={(this.props as any).defaultActive &&\n          //   (this.props as any).defaultActive.x === (this.props as any).datum.x}\n          width={100}\n          text={`${(this.props as any).datum.x}\\n${(this.props as any).datum.y}`}\n          // x={(this.props as any).width / 2}\n          // y={(this.props as any).y + 15}\n          // orientation=\"bottom\"\n          // pointerLength={0}\n          cornerRadius={5}\n          height={40}\n          flyoutStyle={{\n            stroke: \"none\",\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default CustomPieChartLabel;\n","import React, { useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport ChartCard from \"./ChartCard\";\nimport { VictoryPie } from \"victory\";\nimport { hexToString } from \"@etclabscore/eserialize\";\nimport CustomPieChartLabel from \"./CustomPieChartLabel\";\nimport { useTranslation } from \"react-i18next\";\nimport _ from \"lodash\";\n\nconst blockTopMinerCount = (blocks: any[]) => {\n  const result = _(blocks).chain()\n    .countBy((b: any) => hexToString(b.extraData))\n    .map((key: string, val: number) => ({\n      x: val,\n      y: key,\n      label: val,\n    }))\n    .sortBy((item: any) => item.y)\n    .reverse()\n    .value();\n  return result;\n};\n\nconst blockTopMinerCountByAddress = (blocks: any[]) => {\n  const result = _(blocks).chain()\n    .countBy((b: any) => b.miner)\n    .map((key: string, val: number) => ({\n      x: val,\n      y: key,\n      label: val,\n    }))\n    .sortBy((item: any) => item.y)\n    .reverse()\n    .value();\n  return result;\n};\n\ninterface IProps {\n  blocks: any[];\n  config: any;\n}\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\n\nconst MinerStats: React.FC<IProps> = ({blocks}) => {\n  const [showDefaultPieHover, setShowDefaultPieHover] = useState(true);\n  const { t } = useTranslation();\n\n  return (\n    <Grid container justify=\"space-evenly\">\n      <Grid key=\"uncles\" item xs={12} md={4} lg={4}>\n        <ChartCard title={t(\"Miners by address\")}>\n          <VictoryPie\n            cornerRadius={1}\n            // innerRadius={50}\n            colorScale=\"cool\"\n            data={blockTopMinerCountByAddress(blocks)}\n            events={[{\n              target: \"data\",\n              eventHandlers: {\n                onMouseOver: () => {\n                  return [{\n                    target: \"labels\",\n                    mutation: () => {\n                      setShowDefaultPieHover(false);\n                      return { active: true };\n                    },\n                  }];\n                },\n              },\n            }]}\n            labelComponent={<CustomPieChartLabel {...{\n              defaultActive: showDefaultPieHover ? blockTopMinerCountByAddress(blocks)[0] : undefined,\n            }} />}\n          >\n          </VictoryPie>\n        </ChartCard>\n      </Grid>\n      <Grid key=\"uncles\" item xs={12} md={3} lg={3}>\n        <ChartCard title={t(\"Miners by extraData\", { count: config.blockHistoryLength })}>\n          <VictoryPie\n            colorScale=\"cool\"\n            labelComponent={<CustomPieChartLabel />}\n            data={blockTopMinerCount(blocks)}\n          />\n        </ChartCard>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default MinerStats;\n","import React from \"react\";\nimport { Table, TableRow, TableCell, TableHead, TableBody, Typography, Button } from \"@material-ui/core\";\nimport { hexToString, hexToNumber } from \"@etclabscore/eserialize\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport greenColor from \"@material-ui/core/colors/green\";\n\nconst blockTopMiners = (blocks: any[]) => {\n  const result = _(blocks).chain()\n    .countBy((b: any) => b.miner)\n    .map((key: string, val: number) => ({\n      address: val,\n      blocksMined: key,\n    }))\n    .sortBy((item: any) => item.blocksMined)\n    .reverse()\n    .value();\n  return result;\n};\n\nconst groupByMiner = (blocks: any[]) => {\n  const result = _.chain(blocks)\n    .groupBy((b: any) => b.miner)\n    .map((value, key) => {\n      return {\n        [key]: _.groupBy(value, (item) => {\n          return hexToString(item.extraData);\n        }),\n      };\n    })\n    .value();\n  return result;\n};\n\ninterface IProps {\n  blocks: any[];\n}\n\nconst MinerStatsTable: React.FC<IProps> = ({ blocks }) => {\n  const history = useHistory();\n  const topMiners = blockTopMiners(blocks);\n  const groupedMiners = Object.assign({}, ...groupByMiner(blocks));\n  return (\n    <Table aria-label=\"simple table\">\n      <TableHead >\n        <TableRow>\n          <TableCell>Blocks Mined</TableCell>\n          <TableCell>Address</TableCell>\n          <TableCell>ExtraData</TableCell>\n          <TableCell>Blocks</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {topMiners.map((minerData: any) => (\n          <TableRow key={minerData.miner}>\n            <TableCell component=\"th\" scope=\"row\">\n              {minerData.blocksMined}\n            </TableCell>\n            <TableCell>{minerData.address}</TableCell>\n            <TableCell colSpan={2}>\n              <Table>\n                <TableBody>\n                  {_.map(groupedMiners[minerData.address], (bs: any[], key: string) => (\n                    <TableRow>\n                      <TableCell>{key}</TableCell>\n                      <TableCell colSpan={1}>\n                        {bs.map((block) => {\n                          const percentFull = (hexToNumber(block.gasUsed) / hexToNumber(block.gasLimit)) * 100;\n                          return (\n                            <Button\n                              variant=\"outlined\"\n                              style={{\n                                margin: \"3px\",\n                                background: `linear-gradient(to right, ${greenColor[600]} 0% ${percentFull}%, transparent ${percentFull}% 100%)`,\n                              }}\n                              onClick={() => history.push(`/block/${block.hash}`)}\n                            >\n                              <Typography>\n                                {hexToNumber(block.number)}\n                              </Typography>\n                            </Button>\n                          );\n                        })}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table >\n  );\n};\n\nexport default MinerStatsTable;\n","import BlockPagination from \"./BlockPagination\";\nexport default BlockPagination;\n","\nimport React from \"react\";\nimport { Grid, IconButton, Typography } from \"@material-ui/core\";\nimport { ArrowForwardIos, ArrowBackIos } from \"@material-ui/icons\";\n\ninterface IProps {\n  from: number;\n  to: number;\n  disableNext?: boolean;\n  disablePrev?: boolean;\n  onNext?: () => void;\n  onPrev?: () => void;\n  style?: any;\n}\n\nconst BlockPagination: React.FC<IProps> = (props) => {\n\n  return (\n    <Grid container>\n      <Grid container justify=\"flex-end\">\n        <IconButton onClick={props.onPrev} disabled={props.disablePrev}>\n          <ArrowBackIos />\n        </IconButton>\n        <IconButton onClick={props.onNext} disabled={props.disableNext}>\n          <ArrowForwardIos />\n        </IconButton>\n      </Grid>\n      <Grid container justify=\"flex-end\">\n        <Typography>Showing {(props.to - props.from) + 1} Block Range: <b>{props.to}</b> - {props.from}</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BlockPagination;\n","import { CircularProgress, useTheme, Theme } from \"@material-ui/core\";\nimport useEthRPCStore from \"../stores/useEthRPCStore\";\nimport * as React from \"react\";\nimport getBlocks, { useBlockNumber } from \"../helpers\";\nimport MinerStats from \"../components/MinerStats\";\nimport MinerStatsTable from \"../components/MinerStatsTable\";\nimport StatCharts from \"../components/StatCharts\";\nimport getTheme from \"../themes/victoryTheme\";\nimport BlockPagination from \"../components/BlockPagination\";\nimport { History } from \"history\";\nimport _ from \"lodash\";\nimport { Block as IBlock } from \"@etclabscore/ethereum-json-rpc\";\n\nconst useState = React.useState;\n\nconst config = {\n  blockTime: 15, // seconds\n  blockHistoryLength: 100,\n  chartHeight: 200,\n  chartWidth: 400,\n};\ninterface IProps {\n  match: {\n    params: {\n      address: string,\n      block: string,\n    };\n  };\n  history: History;\n}\n\nexport default (props: IProps) => {\n  const [erpc] = useEthRPCStore();\n  const [blockNumber] = useBlockNumber(erpc);\n  const [blocks, setBlocks] = useState<IBlock[]>();\n  const theme = useTheme<Theme>();\n  const victoryTheme = getTheme(theme);\n  const { block } = props.match.params;\n  const blockNum = block !== undefined ? parseInt(block, 10) : blockNumber;\n  const from = Math.max(blockNum - 99, 0);\n  const to = blockNum;\n\n  React.useEffect(() => {\n    if (blockNum === undefined || blockNumber === undefined) {\n      return;\n    }\n    if (blockNum > blockNumber) {\n      props.history.push(`/stats/miners/${blockNumber}`);\n    }\n    if (blockNum < 0) {\n      props.history.push(`/stats/miners/0`);\n    }\n  }, [blockNumber, blockNum, props.history]);\n\n  React.useEffect(() => {\n    if (!erpc) { return; }\n    getBlocks(\n      from,\n      to,\n      erpc,\n    ).then((bl) => {\n      setBlocks(_.compact(bl));\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [from, to]);\n\n  if (!blocks || blockNumber === undefined || blockNum > blockNumber) {\n    return (<CircularProgress />);\n  }\n\n  return (\n    <>\n      <BlockPagination\n        from={from}\n        to={to}\n        disablePrev={blockNum >= blockNumber}\n        disableNext={blockNum === 0}\n        onPrev={() => {\n          const newQuery = blockNum + 100;\n          props.history.push(`/stats/miners/${newQuery}`);\n        }}\n        onNext={() => {\n          const newQuery = Math.max(blockNum - 100, 0);\n          props.history.push(`/stats/miners/${newQuery}`);\n        }}\n      ></BlockPagination>\n      <StatCharts blocks={blocks} victoryTheme={victoryTheme} />\n      <MinerStats blocks={blocks} config={config} />\n      <MinerStatsTable blocks={blocks} />\n    </>\n  );\n};\n","import { createStore } from \"reusable\";\nimport useChainList from \"../hooks/useChainList\";\n\nexport default createStore(() => useChainList());\n","// import { useEffect } from \"react\";\n// import { uniqBy } from \"lodash\";\nimport { IChain as Chain } from \"../models/chain\";\nimport React from \"react\";\n\n// const mergeChainSets = (c1: Chain[], c2: Chain[]) => uniqBy(c1.concat(c2), \"name\");\n\nexport default function() {\n  const [chains, setChains] = React.useState<Chain[]>([\n    {\n      name: \"Aves Network\",\n      network: \"mainnet\",\n      rpc: [\"https://rpc.avescoin.io/\"],\n    },\n  ]);\n\n  // uncomment once we add 'chain list provider' concept. This list blows.\n\n  // useEffect(() => {\n  //   if (chains === undefined) {\n  //     fetch(\"https://chainid.network/chains.json\")\n  //       .then((r) => r.json())\n  //       .then((chainIdNetwork) => {\n  //         const filteredChains = chainIdNetwork.filter((c: Chain) => {\n  //           if (c.rpc.length === 0) {\n  //             return false;\n  //           }\n  //           return true;\n  //         });\n  //         if (chains) {\n  //           setChains(mergeChainSets(chains, filteredChains));\n  //         } else {\n  //           setChains(filteredChains);\n  //         };\n  //       });\n  //   }\n  // }, [chains]);\n\n  return [chains, setChains];\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport { IChain as Chain } from \"../../models/chain\";\n\ninterface IProps {\n  open: boolean;\n  onCancel: () => void;\n  onSubmit: (chain: Chain) => void;\n}\n\nconst AddChain: React.FC<IProps> = (props: IProps) => {\n  const [name, setName] = React.useState<string>();\n  const [network, setNetwork] = React.useState<string>(\"mainnet\");\n  const [rpc, setRpc] = React.useState<string>();\n\n  const handleSubmit = () => {\n    if (name === undefined || network === undefined || rpc === undefined) { return; }\n\n    const chain: Chain = { name, network, rpc: [rpc] };\n    props.onSubmit(chain);\n  };\n\n  return (\n    <>\n      <Dialog open={props.open} onClose={props.onCancel} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Add Chain</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To add a chain to the chain list and begin using Expedition with your own\n            rpc provider, please enter the required fields below:\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Chain Name\"\n            type=\"text\"\n            fullWidth\n            onChange={(v) => setName(v.target.value) }\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"network\"\n            label=\"Network\"\n            defaultValue=\"mainnet\"\n            type=\"text\"\n            fullWidth\n            onChange={(v) => setNetwork(v.target.value) }\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"rpcs\"\n            label=\"RPC endpoint\"\n            type=\"text\"\n            fullWidth\n            onChange={(v) => setRpc(v.target.value) }\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default AddChain;\n","import {\n  AppBar,\n  CssBaseline,\n  Toolbar,\n  Typography,\n  IconButton,\n  Grid,\n  InputBase,\n  Tooltip,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Link from \"@material-ui/core/Link\";\nimport React, {\n  Dispatch,\n  ChangeEvent,\n  KeyboardEvent,\n  useState,\n  useEffect,\n} from \"react\";\nimport { Link as RouterLink, Router, Route, Switch } from \"react-router-dom\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"./App.css\";\nimport Address from \"./containers/Address\";\nimport Block from \"./containers/Block\";\nimport Dashboard from \"./containers/Dashboard\";\nimport NodeView from \"./containers/NodeView\";\nimport Transaction from \"./containers/Transaction\";\nimport { darkTheme, lightTheme } from \"./themes/jadeTheme\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport NotesIcon from \"@material-ui/icons/Notes\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\nimport useInterval from \"use-interval\";\nimport ETHJSONSpec from \"@etclabscore/ethereum-json-rpc-specification/openrpc.json\";\nimport { useTranslation } from \"react-i18next\";\nimport LanguageMenu from \"./containers/LanguageMenu\";\nimport { createBrowserHistory } from \"history\";\nimport ChainDropdown from \"./components/ChainDropdown/ChainDropdown\";\nimport {\n  StringParam,\n  QueryParamProvider,\n  useQueryParams,\n} from \"use-query-params\";\nimport { createPreserveQueryHistory } from \"./helpers/createPreserveHistory\";\nimport BlockRawContainer from \"./containers/BlockRawContainer\";\nimport TransactionRawContainer from \"./containers/TransactionRawContainer\";\nimport expeditionLogo from \"./expedition.png\";\nimport MinerStatsPage from \"./containers/MinerStatsPage\";\nimport { IChain as Chain } from \"./models/chain\";\nimport useChainListStore from \"./stores/useChainListStore\";\nimport useEthRPCStore from \"./stores/useEthRPCStore\";\nimport AddChain from \"./components/AddChain/AddChain\";\nimport { NetworkWifi } from \"@material-ui/icons\";\n\nconst history = createPreserveQueryHistory(createBrowserHistory, [\n  \"network\",\n  \"rpcUrl\",\n])();\n\nfunction App(props: any) {\n  const { t } = useTranslation();\n  const darkMode = useDarkMode();\n  const [search, setSearch] = useState();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n\n  const [selectedChain, setSelectedChain] = useState<Chain>();\n  const [chains, setChains] = useChainListStore<[Chain[], Dispatch<Chain[]>]>();\n  const [ethRPC, setEthRPCChain] = useEthRPCStore();\n\n  const [addChainDialogIsOpen, setAddChainDialogIsOpen] =\n    useState<boolean>(false);\n\n  // default the selectedChain once chain list loads\n  useEffect(() => {\n    if (selectedChain !== undefined) {\n      return;\n    }\n    if (chains === undefined) {\n      return;\n    }\n    if (chains.length === 0) {\n      return;\n    }\n    if (query.rpcUrl) {\n      return;\n    }\n\n    setSelectedChain(chains[0]);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chains, selectedChain]);\n\n  const [query, setQuery] = useQueryParams({\n    network: StringParam,\n    rpcUrl: StringParam,\n  });\n\n  // when url param is used to pick network,\n  // keep things updated once chains list is loaded\n  useEffect(() => {\n    if (!chains || chains.length === 0) {\n      return;\n    }\n    if (query.rpcUrl) {\n      return;\n    }\n\n    if (query.network && selectedChain !== undefined) {\n      if (query.network === selectedChain.name) {\n        return;\n      }\n    }\n\n    if (chains && query.network) {\n      const foundChain = chains.find(\n        (chain: Chain) => chain.name === query.network\n      );\n      setSelectedChain(foundChain);\n    } else {\n      setSelectedChain(chains[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chains, query.network]);\n\n  // keeps the window.location in sync with selected network\n  useEffect(() => {\n    if (selectedChain === undefined) {\n      return;\n    }\n    const { name } = selectedChain as Chain;\n\n    if (name !== query.network) {\n      setQuery({ network: name });\n      history.push({\n        pathname: history.location.pathname,\n        search: `?network=${name}`,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedChain, setQuery]);\n\n  // keep selected chain in sync with the current ethrpc instance\n  useEffect(() => {\n    if (selectedChain !== undefined) {\n      setEthRPCChain(selectedChain);\n    }\n  }, [selectedChain, setEthRPCChain]);\n\n  React.useEffect(() => {\n    if (ethRPC) {\n      ethRPC.startBatch();\n    }\n  }, [ethRPC]);\n\n  useInterval(\n    () => {\n      if (ethRPC) {\n        ethRPC.stopBatch();\n        ethRPC.startBatch();\n      }\n    },\n    100,\n    true\n  );\n\n\n  \n    \n  const addNetwork = async () => {\n    try{\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            // 33333\n            chainId: '0x8235',\n            chainName: \"Aves\",\n            rpcUrls: [\"https://rpc.avescoin.io/\"],\n            blockExplorerUrls: [\"https://avescan.io/\"],\n            nativeCurrency: {\n              name: \"AVES\",\n              symbol: \"AVS\", // 2-6 characters long\n              decimals: 18,\n            },\n          },\n        ],\n      });\n      // refresh\n      window.location.reload();\n    }\n    catch {\n      alert(\"Done\")\n    }\n    finally {\n      alert(\"Done\")\n\n    }\n    \n\n\n\n  };\n  const isAddress = (q: string): boolean => {\n    const re = new RegExp(ETHJSONSpec.components.schemas.Address.pattern);\n    return re.test(q);\n  };\n\n  const isKeccakHash = (q: string): boolean => {\n    const re = new RegExp(ETHJSONSpec.components.schemas.Keccak.pattern);\n    return re.test(q);\n  };\n\n  const isBlockNumber = (q: string): boolean => {\n    const re = new RegExp(/^-{0,1}\\d+$/);\n    return re.test(q);\n  };\n\n  const handleSearch = async (qry: string | undefined) => {\n    if (qry === undefined) {\n      return;\n    }\n    const q = qry.trim();\n    if (isAddress(q)) {\n      history.push(`/address/${q}`);\n    }\n    if (isKeccakHash(q)) {\n      let transaction;\n\n      try {\n        transaction = await ethRPC.eth_getTransactionByHash(q);\n      } catch (e) {\n        // do nothing\n      }\n\n      if (transaction) {\n        history.push(`/tx/${q}`);\n      }\n      let block;\n      try {\n        block = await ethRPC.eth_getBlockByHash(q, false);\n      } catch (e) {\n        // do nothing\n      }\n      if (block) {\n        history.push(`/block/${q}`);\n      }\n    }\n    if (isBlockNumber(q)) {\n      const block = await ethRPC.eth_getBlockByNumber(\n        `0x${parseInt(q, 10).toString(16)}`,\n        false\n      );\n      if (block) {\n        history.push(`/block/${block.hash}`);\n      }\n    }\n  };\n\n  const openAddChainModal = () => {\n    setAddChainDialogIsOpen(true);\n  };\n\n  const cancelAddChainDialog = () => {\n    setAddChainDialogIsOpen(false);\n  };\n\n  const submitAddChainDialog = (c: Chain) => {\n    setAddChainDialogIsOpen(false);\n    setChains(chains.concat(c));\n    setSelectedChain(c);\n  };\n\n  return (\n    <Router history={history}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"sticky\" color=\"default\" elevation={0}>\n          <Toolbar>\n            <Grid\n              justify=\"space-between\"\n              alignItems=\"center\"\n              alignContent=\"center\"\n              container\n            >\n              <Grid item style={{ marginTop: \"8px\" }}>\n                <Link\n                  component={({\n                    className,\n                    children,\n                  }: {\n                    children: any;\n                    className: string;\n                  }) => (\n                    <RouterLink className={className} to={\"/\"}>\n                      {children}\n                    </RouterLink>\n                  )}\n                >\n                  <Grid container>\n                    <Grid>\n                      <img\n                        alt=\"expedition-logo\"\n                        height=\"30\"\n                        style={{ marginRight: \"10px\" }}\n                        src={\"https://cdn.discordapp.com/attachments/1014981973263011853/1036978915807338516/aves-logo.png\"}\n                      />\n                    </Grid>\n                    <Grid>\n                      <Typography color=\"textSecondary\" variant=\"h6\">\n                        {t(\"Aves network \")}\n                      </Typography>\n                      <button onClick={addNetwork}\n                        style={{\n                          backgroundColor: \"transparent\",\n                          border: \"none\",\n                          color: \"red\",\n                          padding: \"0px\",\n                          textDecoration: \"underline\",\n                          cursor: \"pointer\",\n                        }}\n                      > Add Network </button>\n                    </Grid>\n                  </Grid>\n                </Link>\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <InputBase\n                  placeholder={t(\n                    \"Enter an Address, Transaction Hash or Block Number\"\n                  )}\n                  onKeyDown={(event: KeyboardEvent<HTMLInputElement>) => {\n                    if (event.keyCode === 13) {\n                      handleSearch(search);\n                    }\n                  }}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                    if (event.target.value) {\n                      const { value } = event.target;\n                      setSearch(value as any);\n                    }\n                  }}\n                  fullWidth\n                  style={{\n                    background: \"rgba(0,0,0,0.1)\",\n                    borderRadius: \"4px\",\n                    padding: \"5px 10px 0px 10px\",\n                    marginRight: \"5px\",\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                {selectedChain ? (\n                  <ChainDropdown\n                    chains={chains}\n                    onChange={setSelectedChain}\n                    selected={selectedChain}\n                  />\n                ) : (\n                  <>\n                    {query && query.rpcUrl && (\n                      <Tooltip title={query.rpcUrl}>\n                        <IconButton >\n                          <NetworkWifi />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                    {!query.rpcUrl && <CircularProgress />}\n                  </>\n                )}\n                <LanguageMenu />\n                <Tooltip title={t(\"Expedition Github\") as string}>\n                  <IconButton\n                    onClick={() =>\n                      window.open(\"https://github.com/xops/expedition\")\n                    }\n                  >\n                    <CodeIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title={t(\"Toggle Dark Mode\") as string}>\n                  <IconButton onClick={darkMode.toggle}>\n                    {darkMode.value ? <Brightness3Icon /> : <WbSunnyIcon />}\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n        <AddChain\n          open={addChainDialogIsOpen}\n          onCancel={cancelAddChainDialog}\n          onSubmit={submitAddChainDialog}\n        />\n        <div style={{ margin: \"0px 25px 0px 25px\" }}>\n          <QueryParamProvider ReactRouterRoute={Route}>\n            <CssBaseline />\n            <Switch>\n              <Route path={\"/\"} component={Dashboard} exact={true} />\n              <Route\n                path={\"/stats/miners\"}\n                component={MinerStatsPage}\n                exact={true}\n              />\n              <Route path={\"/stats/miners/:block\"} component={MinerStatsPage} />\n              <Route path={\"/block/:hash/raw\"} component={BlockRawContainer} />\n              <Route path={\"/block/:hash\"} component={Block} />\n              <Route path={\"/blocks/:number\"} component={NodeView} />\n              <Route\n                path={\"/tx/:hash/raw\"}\n                component={TransactionRawContainer}\n              />\n              <Route path={\"/tx/:hash\"} component={Transaction} />\n              <Route path={\"/address/:address/:block\"} component={Address} />\n              <Route path={\"/address/:address\"} component={Address} />\n            </Switch>\n          </QueryParamProvider>\n        </div>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from \"i18next\";\nimport { ReusableProvider } from \"reusable\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <I18nextProvider i18n={i18n}>\n    <ReusableProvider>\n      <App />\n    </ReusableProvider>\n  </I18nextProvider>,\n  document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}